spring:
  profiles:
    active: local
    group:
      "local": "local_db, base, oauth"
      "test": "test_db, base, oauth"
      "real": "real_db, base, oauth"
      "real1": "real1_db, base, oauth"
      "real2": "real2_db, base, oauth"


---


spring:
  config:
    activate:
      on-profile: base
  messages:
    basename: messages,errors
  mail:
    host: smtp.gmail.com
    port: 587
    username: hansungmoon1002@gmail.com
    password: lxzskrnfkjlymqau
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true
          auth: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
cloud:
  aws:
    s3:
      bucket-name: neighbor-build
      dir: images
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      access-key: AKIASVDMK6PB7LSFAVG2
      secret-key: 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


---


spring:
  config:
    activate:
      on-profile: oauth
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 1008060436788-dmq8hj575pafbfnajpmdkouao0lm2ucg.apps.googleusercontent.com
            client-secret: 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
            scope: profile,email,https://www.googleapis.com/auth/user.gender.read
          #            user-info-uri: https://people.googleapis.com/v1/people/me?personFields=genders,names,emailAddresses
          #            user-name-attribute: json최상위 괄호이름

          naver:
            client-id: z_c0ETHIqnzInQwcpjLX
            client-secret: A2wobfeDuq
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: name,email,profile_image,gender
            client-name: Naver

          kakao:
            client-id: cd429446ad94ee1e20c77038ad37b1a2
            client-secret: sBru1IpfM8HvYQw5WNxc5tHbU4uaBoPU
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope: profile_nickname, account_email, profile_image
            authorization-grant-type: authorization_code
            client-authentication-method: POST

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


---


spring:
  config:
    activate:
      on-profile: local_db
  datasource:
    url: jdbc:mysql://localhost:3306/neighbor?serverTimezone=Asia/Seoul
    username: neighbor
    password: hood
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        #        QueryDSL로 사용된 JPQL 보기
        use_sql_comments: true
        default_batch_fetch_size: 500 # 컬렉션 조회 페이징 및 최적화
file:
  dir: /C:/Users/HOME/Desktop/JAVA/menu_file/
logging.level:
  org.hibernate.SQL: debug
  #  org.hibernate.type: trace


---


spring:
  config:
    activate:
      on-profile: test_db
  datasource:
    url: jdbc:mariadb://neighbor.cc3fmqva1s3z.ap-northeast-2.rds.amazonaws.com:3306/neighbor
    username: neighbor
    password: neighborhood
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        #        QueryDSL로 사용된 JPQL 보기
        use_sql_comments: true
        default_batch_fetch_size: 500 # 컬렉션 조회 페이징 및 최적화
file:
  dir: /C:/Users/HOME/Desktop/JAVA/menu_file/
logging.level:
  org.hibernate.SQL: debug
  #  org.hibernate.type: trace


---


spring:
  config:
    activate:
      on-profile: real_db
  datasource:
    url: jdbc:mariadb://neighbor.cc3fmqva1s3z.ap-northeast-2.rds.amazonaws.com:3306/neighbor
    username: neighbor
    password: neighborhood
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 500 # 컬렉션 조회 페이징 및 최적화
file:
  dir: /C:/Users/HOME/Desktop/JAVA/menu_file/


---


spring:
  config:
    activate:
      on-profile: real1_db
  datasource:
    url: jdbc:mariadb://neighbor.cc3fmqva1s3z.ap-northeast-2.rds.amazonaws.com:3306/neighbor
    username: neighbor
    password: neighborhood
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 500 # 컬렉션 조회 페이징 및 최적화
file:
  dir: /C:/Users/HOME/Desktop/JAVA/menu_file/
server:
  port: 8081


---


spring:
  config:
    activate:
      on-profile: real2_db
  datasource:
    url: jdbc:mariadb://neighbor.cc3fmqva1s3z.ap-northeast-2.rds.amazonaws.com:3306/neighbor
    username: neighbor
    password: neighborhood
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 500 # 컬렉션 조회 페이징 및 최적화
file:
  dir: /C:/Users/ywOnp/Desktop/Study/review/file/
server:
  port: 8082